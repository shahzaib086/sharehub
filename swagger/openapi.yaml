openapi: 3.0.0
info:
  title: ShareHub API
  version: 1.0.0
  description: API for ShareHub, a platform for sharing unused items and reducing waste.
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: password123
                email:
                  type: string
                  example: johndoe@example.com
                lat:
                  type: string
                  example: 44.4268° N
                lng:
                  type: string
                  example: 26.1025° E
      responses:
        '201':
          description: User created successfully.
  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User LoggedIn Successfully!"
                  access_token:
                    type: string
                    example: "your_generated_jwt_token_here"
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email and password are required."
        '401':
          description: Incorrect email or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Incorrect Email/Password"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while logging in."

  /logout:
    post:
      summary: Log out the current user
      responses:
        '200':
          description: User logged out successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while logging out."
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users.
          
  /favorite/create:
    post:
      summary: Add a favorite category for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "12345"
                  description: The ID of the user adding the category.
                user_name:
                  type: string
                  example: "johndoe"
                  description: The name of the user adding the category.
                category_id:
                  type: string
                  example: "abc123"
                  description: The unique ID of the category being created.
                category_name:
                  type: string
                  example: "Electronics"
                  description: The name of the category being added.
                created_at:
                  type: string
                  format: date-time
                  example: "2025-01-14T10:30:00Z"
                  description: Timestamp of when the category was created.
      responses:
        '201':
          description: Favorite category added successfully.
          
  /favorite:
    get:
      summary: Get user's favorite categories
      responses:
        '200':
          description: A list of favorite categories for the user.

  /post/create:
    post:
      summary: Add a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Fresh Bread
                price:
                  type: string
                  example: 12 $
                pickup_address:
                  type: string
                  example: Bulevardul Iuliu Maniu 1-3
                Description:
                  type: string
                  example: 100 grams packet
                expiry_date:
                  type: string
                  example: 18-01-2025
                category_id:
                  type: string
                  example: Food
      responses:
        '201':
          description: Item added successfully.
  /posts:
    get:
      summary: Get a list of items with optional filters and pagination.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: The page number to fetch (defaults to 1 if not provided).
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of items to return per page (defaults to 10 if not provided).
        - name: category_id
          in: query
          required: false
          schema:
            type: string
            description: The category ID to filter items by.
        - name: keyword
          in: query
          required: false
          schema:
            type: string
            description: A keyword to search for in item names, descriptions, or other fields.
      responses:
        '200':
          description: A list of items.

  /category:
    get:
      summary: Get all available categories.
      description: Fetches a list of categories stored in the system.
      responses:
        '200':
          description: Successfully fetched categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: string
                      example: "Food, Clothing, Books, Electronics, Furniture, Toys, Stationery, Appliances, Household Items, Tools, Services, Gardening, Pet Supplies, Health & Wellness, Office Supplies, Travel Items, Events & Activities"
        '500':
          description: Error occurred while fetching categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while fetching categories."
  